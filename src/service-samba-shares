#!/bin/bash

export SYSTEMD_PAGER=
export LC_ALL=C
set -o pipefail

LOG_FILE="/var/log/samba-shares.log"

log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PID:$$] $1" >> "$LOG_FILE"
}

error() {
  log "ERROR: $1"
  echo "{\"status\": \"error\", \"message\": \"$1\"}"
  release_lock
  exit 1
} 

# acquire_lock() {
#   exec 9>/var/lock/samba-shares.lock
#   flock -n 9 || error "Другая операция уже выполняется"
#   trap 'release_lock' EXIT
# }

# release_lock() {
#   flock -u 9
#   rm -f /var/lock/samba-shares.lock
# }

manage_service() {
  local action=$1
  local service=$2
  log "Выполняем: systemctl $action $service"

  if ! timeout 15 systemctl "$action" "$service" >> "$LOG_FILE" 2>&1; then
    error "Не удалось выполнить $action для $service"
  fi
}


get_samba_shares() {
  testparm -s 2>/dev/null | awk '
    BEGIN {
      print "["
      first = 1
    }

    /^\[.*\]$/ {
      if (share != "" && path != "") {
        if (!first) printf(",\n"); else first = 0

        access_type = "ro"
        if (tolower(writable) == "yes" || tolower(readonly) == "no") access_type = "rw"

        printf("  {\"share_name\":\"%s\",\"share_path\":\"%s\",\"access_type\":\"%s\",\"access_user\":\"\",\"enabled\":true,\"allowed_users\":\"%s\"}", share, path, access_type, allowed_users)
      }

      share = substr($0, 2, length($0) - 2)
      path = ""; writable = ""; readonly = ""; allowed_users = ""
      next
    }

    /^[[:space:]]*path[[:space:]]*=/ {
      sub(/^[[:space:]]*path[[:space:]]*=[[:space:]]*/, "")
      path = $0
      next
    }

    /^[[:space:]]*writable[[:space:]]*=/ {
      sub(/^[[:space:]]*writable[[:space:]]*=[[:space:]]*/, "")
      writable = $0
      next
    }

    /^[[:space:]]*read only[[:space:]]*=/ {
      sub(/^[[:space:]]*read only[[:space:]]*=[[:space:]]*/, "")
      readonly = $0
      next
    }

    /^[[:space:]]*valid users[[:space:]]*=/ {
      sub(/^[[:space:]]*valid users[[:space:]]*=[[:space:]]*/, "")
      allowed_users = $0
      next
    }

    /^\s*$/ {
      if (share != "" && path != "") {
        if (!first) printf(",\n"); else first = 0

        access_type = "ro"
        if (tolower(writable) == "yes" || tolower(readonly) == "no") access_type = "rw"

        printf("  {\"share_name\":\"%s\",\"share_path\":\"%s\",\"access_type\":\"%s\",\"access_user\":\"\",\"enabled\":true,\"allowed_users\":\"%s\"}", share, path, access_type, allowed_users)
      }

      share = ""; path = ""; writable = ""; readonly = ""; allowed_users = ""
    }

    END {
      if (share != "" && path != "") {
        if (!first) printf(",\n")

        access_type = "ro"
        if (tolower(writable) == "yes" || tolower(readonly) == "no") access_type = "rw"

        printf("  {\"share_name\":\"%s\",\"share_path\":\"%s\",\"access_type\":\"%s\",\"access_user\":\"\",\"enabled\":true,\"allowed_users\":\"%s\"}", share, path, access_type, allowed_users)
      }

      print "\n]"
    }
  '
}

# ======= ФУНКЦИИ ДЛЯ КАЖДОГО ACTION =======

create_share() {
  local share_name=$1 share_path=$2 access_user=$3 access_type=$4 allowed_users=$5

  log "Создание шары: $share_name по пути $share_path"

  if [[ -z "$share_path" || -z "$share_name" || -z "$access_user" || -z "$access_type" ]]; then
    error "Не заданы обязательные параметры для создания"
  fi

  mkdir -p "$share_path" || error "Не удалось создать папку $share_path"
  user_group=$(id -gn "$access_user")
  chown -R "$access_user":"$user_group" "$share_path" || error "Не удалось изменить владельца"

  # command -v setfacl >/dev/null && setfacl -b "$share_path" 2>/dev/null || true
  if command -v setfacl >/dev/null 2>&1; then
    setfacl -b "$share_path" 2>/dev/null || true
  fi

  local writable="no"
  if [[ "$access_type" == "rw" ]]; then
    chmod 2770 "$share_path" || error "Не удалось установить права 2770"
    writable="yes"
  else
    chmod 2750 "$share_path" || error "Не удалось установить права 2750"
  fi

  [[ "$access_type" == "rw" && ! -w "$share_path" ]] && error "Папка $share_path недоступна для записи после установки прав"

  grep -q "^\[$share_name\]" /etc/samba/smb.conf && error "Шара [$share_name] уже существует"

  # local valid_users="$access_user"
  # [[ -n "$allowed_users" && "$allowed_users" != "null" ]] && valid_users="$allowed_users"
  local valid_users="$access_user"
  if [[ -n "$allowed_users" && "$allowed_users" != "null" ]]; then
    valid_users="$access_user,$allowed_users"
  fi


  local TEMP_FILE
  TEMP_FILE=$(mktemp)
  cp /etc/samba/smb.conf "$TEMP_FILE"

  cat <<EOF >> "$TEMP_FILE"

[$share_name]
   path = $share_path
   browsable = yes
   writable = $writable
   guest ok = no
   valid users = $valid_users
EOF

  testparm -s "$TEMP_FILE" >/dev/null || { rm -f "$TEMP_FILE"; error "Ошибка в конфигурации smb.conf"; }

  mv "$TEMP_FILE" /etc/samba/smb.conf
  chmod 644 /etc/samba/smb.conf
  manage_service restart smb.service

  echo '{"status": "created"}'
}

delete_share() {
  local share_name=$1 share_path=$2

  [[ -z "$share_name" || -z "$share_path" ]] && error "Не заданы обязательные параметры для удаления"
  ! grep -q "^\[$share_name\]" /etc/samba/smb.conf && error "Шара [$share_name] не найдена"

  sed -i "/^\[$share_name\]/,/^$/d" /etc/samba/smb.conf
  [[ -d "$share_path" ]] && rm -rf "$share_path"

  manage_service restart smb.service
  echo '{"status": "deleted"}'
}

deploy_samba() {
  command -v smbd >/dev/null || error "Samba не установлена"
  systemctl enable --now smb nmb &>> "$LOG_FILE" || error "Не удалось активировать службы Samba"
  ! systemctl is-active smb nmb >/dev/null && error "Службы не перешли в активное состояние"

  # command -v alterator-announce >/dev/null && alterator-announce "samba_shares" "deployed" || true
  if command -v alterator-announce >/dev/null 2>&1; then
    alterator-announce "samba_shares" "deployed" || true
  fi

  echo "{
    \"status\": \"deployed\",
    \"state\": \"deployed\",
    \"services\": {
      \"smb\": \"$(systemctl is-active smb)\",
      \"nmb\": \"$(systemctl is-active nmb)\"
    },
    \"message\": \"Samba успешно развернут\"
  }"
}

undeploy_samba() {
  manage_service stop smb.service
  manage_service disable smb.service
  manage_service stop nmb.service
  manage_service disable nmb.service

  echo '{"status": "undeployed"}'
}

start_samba() {
  manage_service start smb.service
  local shares_json
  shares_json=$(get_samba_shares)
  echo "{\"status\":\"started\", \"shares\": $shares_json}"
}

stop_samba() {
  manage_service stop smb.service
  local shares_json
  shares_json=$(get_samba_shares)
  echo "{\"status\":\"stopped\", \"shares\": $shares_json}"
}

status_samba() {
  local smb_status nmb_status state exit_code shares_json
  smb_status=$(systemctl is-active smb.service)
  nmb_status=$(systemctl is-active nmb.service)

  if [[ "$smb_status" == "active" && "$nmb_status" == "active" ]]; then
    state="deployed"; exit_code=128
  elif [[ "$smb_status" == "active" || "$nmb_status" == "active" ]]; then
    state="deployed"; exit_code=127
  else
    state="undeployed"; exit_code=0
  fi

  shares_json=$(get_samba_shares)

  echo "{
    \"status\": \"$state\",
    \"state\": \"$state\",
    \"services\": {
      \"smb\": \"$smb_status\",
      \"nmb\": \"$nmb_status\"
    },
    \"shares\": $shares_json
  }"
  exit $exit_code
}

update_share() {
  local share_name=$1 share_path=$2 access_user=$3 access_type=$4 allowed_users=$5

  [[ -z "$share_name" || -z "$share_path" || -z "$access_user" || -z "$access_type" ]] && error "Недостаточно параметров для обновления"

  sed -i "/^\[$share_name\]/,/^$/d" /etc/samba/smb.conf

  local valid_users="$access_user"
  [[ -n "$allowed_users" && "$allowed_users" != "null" ]] && valid_users="$allowed_users"

  local writable="no"
  [[ "$access_type" == "rw" ]] && writable="yes"

  cat <<EOF >> /etc/samba/smb.conf

[$share_name]
   path = $share_path
   browsable = yes
   writable = $writable
   guest ok = no
   valid users = $valid_users
EOF

  testparm -s /etc/samba/smb.conf >/dev/null || error "Ошибка в конфигурации"

  mkdir -p "$share_path"
  chown -R "$access_user":"users" "$share_path"

  # command -v setfacl >/dev/null && setfacl -b "$share_path" 2>/dev/null || true
  if command -v setfacl >/dev/null 2>&1; then
    setfacl -b "$share_path" 2>/dev/null || true
  fi

  # [[ "$access_type" == "rw" ]] && chmod 2770 "$share_path" || chmod 2750 "$share_path"
  if [[ "$access_type" == "rw" ]]; then
    chmod 2770 "$share_path"
  else
    chmod 2750 "$share_path"
  fi


  [[ "$access_type" == "rw" && ! -w "$share_path" ]] && error "Папка $share_path недоступна для записи"
}

backup_config() {
  local backup_file="/etc/samba/smb-b.conf"
  mkdir -p "$(dirname "$backup_file")" || error "Не удалось создать папку"

  # cp /etc/samba/smb.conf "$backup_file" && \
  #   echo "{\"status\": \"success\", \"message\": \"Конфигурация сохранена в $backup_file\"}" || \
  #   error "Не удалось создать бэкап"
  if cp /etc/samba/smb.conf "$backup_file"; then
    echo "{\"status\": \"success\", \"message\": \"Конфигурация сохранена в $backup_file\"}"
  else
    error "Не удалось создать бэкап"
  fi
}

restore_config() {
  local backup_file="/etc/samba/smb-b.conf"
  [[ ! -f "$backup_file" ]] && error "Бэкап не найден"

  cp "$backup_file" /etc/samba/smb.conf || error "Не удалось восстановить конфигурацию"
  systemctl restart smb.service || error "Ошибка перезапуска Samba после восстановления"

  echo "{\"status\": \"restored\", \"message\": \"Конфигурация восстановлена\"}"
}

# ========== ГЛАВНЫЙ БЛОК ==========

log "--- Запуск скрипта ---"
# acquire_lock

[[ "$EUID" -ne 0 ]] && error "Root required"

read -t 10 -r input || { log "Таймаут при чтении входных данных"; input="{}"; }
log "Получены входные данные: $input"

action=$(echo "$input" | jq -r '.operation // empty')
[[ -z "$action" ]] && action="$1"
[[ -z "$action" ]] && error "Не указано поле 'operation'"

share_name=$(echo "$input" | jq -r '.share_name // empty')
share_path=$(echo "$input" | jq -r '.share_path // empty')
access_user=$(echo "$input" | jq -r '.access_user // empty')
access_type=$(echo "$input" | jq -r '.access_type // empty')
allowed_users=$(echo "$input" | jq -r '.allowed_users // empty')

case "$action" in
  create) create_share "$share_name" "$share_path" "$access_user" "$access_type" "$allowed_users" ;;
  delete) delete_share "$share_name" "$share_path" ;;
  deploy) deploy_samba ;;
  undeploy) undeploy_samba ;;
  start) start_samba ;;
  stop) stop_samba ;;
  status) status_samba ;;
  update) update_share "$share_name" "$share_path" "$access_user" "$access_type" "$allowed_users" ;;
  backup) backup_config ;;
  restore) restore_config ;;
  *) error "Неизвестное действие: $action" ;;
esac

log "Скрипт успешно завершен"
# release_lock
exit 0
